import logging

from aiogram import types, Router, F, Bot
from aiogram.exceptions import TelegramNetworkError
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv

from data.sqlite_db_users import DatabaseUsers
from data.sqlite_men_questionnaire import MensQuestionnaires
from data.sqlite_woman_questionnaire import WomanQuestionnaires
from filters.admins_filter import AdminsFilter, admins_filter
from keyboards.inline import moderation_keyboard, download_button
from utils.auxiliary_module import moderator_text
from utils.logs_hendler_telegram import setup_bot_logger
from utils.states import UserIdState


logger = logging.getLogger(__name__)

load_dotenv()

db_men = MensQuestionnaires()
db_woman = WomanQuestionnaires()
db_users = DatabaseUsers()

main_admin_router = Router()


@main_admin_router.callback_query(F.data.in_(['approved', 'rejected']),
                                  AdminsFilter(admins_filter()),
                                  UserIdState.USER_ID
                                  )
async def moderation_questionnaires(query: types.CallbackQuery,
                                    bot: Bot,
                                    state: FSMContext) -> None:
    data = await state.get_data()
    await state.clear()
    user_id = data.get('user_id')
    logger.info("Moderation questionnaires started")
    if query.data == 'approved' and db_men.profile_exists(user_id=user_id):
        db_men.update_moderation(user_id=user_id, moderation='–û–¥–æ–±—Ä–µ–Ω–æ')
        await query.message.answer("‚úÖ–ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                                   "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        await query.answer()
        await bot.send_message(chat_id=user_id, text="‚úÖ–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")
    elif query.data == 'approved' and db_woman.profile_exists(user_id=user_id):
        db_woman.update_moderation(user_id=user_id, moderation='–û–¥–æ–±—Ä–µ–Ω–æ')
        await query.message.answer("‚úÖ–ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                                   "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        await bot.send_message(chat_id=user_id, text="‚úÖ–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")
        await query.answer()
    elif query.data == 'rejected' and db_men.profile_exists(user_id=user_id):
        db_men.update_moderation(user_id=user_id, moderation='–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')
        await query.message.answer("üö´–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                                   "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        await bot.send_message(chat_id=user_id,
                               text="üö´–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n"
                                    "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
                                    "‚úèÔ∏è–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n"
                                    "–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
                                    '–û–¢–ü–†–ê–í–¨–¢–ï –í–ò–î–ï–û–°–û–û–ë–©–ï–ù–ò–ï –° –§–†–ê–ó–û–ô "–î–õ–Ø –ö–ê–ù–ê–õ–ê –ó–ù–ê–ö–û–ú–°–¢–í"\n'
                                    "–ù–ê–ñ–ê–í –ù–ê –ö–ù–û–ü–ö–£ 'üìΩ–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ'\n"
                                    "–ë–µ–∑ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        await query.answer()
    elif query.data == 'rejected' and db_woman.profile_exists(user_id=user_id):
        db_woman.update_moderation(user_id=user_id, moderation='–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')
        await query.message.answer("üö´–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                                   "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
        await bot.send_message(chat_id=user_id,
                               text="üö´–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n"
                                    "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
                                    "‚úèÔ∏è–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n"
                                    "–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
                                    '–û–¢–ü–†–ê–í–¨–¢–ï –í–ò–î–ï–û–°–û–û–ë–©–ï–ù–ò–ï –° –§–†–ê–ó–û–ô "–î–õ–Ø –ö–ê–ù–ê–õ–ê –ó–ù–ê–ö–û–ú–°–¢–í"\n'
                                    "–ù–ê–ñ–ê–í –ù–ê –ö–ù–û–ü–ö–£ 'üìΩ–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ'\n"
                                    "–ë–µ–∑ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        await query.answer()


@main_admin_router.callback_query(F.data.in_(['approved', 'rejected']),
                                  AdminsFilter(admins_filter()),
                                  )
async def not_moderation_questionnaires(query: types.CallbackQuery):
    logger.info("not_moderation_questionnaires")
    await query.message.answer("–ê–Ω–∫–µ—Ç–∞ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞, –ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –∞–Ω–∫–µ—Ç—É!")
    await query.answer()


@main_admin_router.message(F.text == "‚è©–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–∫–µ—Ç—ã",
                           AdminsFilter(admins_filter()), )
async def next_moderation_questionnaires(message: types.Message,
                                         state: FSMContext,
                                         bot: Bot) -> None:
    try:
        logger.info("next_moderation_questionnaires")
        if db_men.select_profile(moderation="–ù–µ –ø—Ä–æ–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ"):
            questionnaires = db_men.select_profile(moderation="–ù–µ –ø—Ä–æ–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            await state.set_state(UserIdState.USER_ID)
            await state.update_data(user_id=int(questionnaires[0]))
            await bot.send_photo(chat_id=message.chat.id, photo=questionnaires[1],
                                 caption=moderator_text(questionnaires),
                                 reply_markup=moderation_keyboard,
                                 )
        elif db_woman.select_profile(moderation="–ù–µ –ø—Ä–æ–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ"):
            questionnaires = db_woman.select_profile(moderation="–ù–µ –ø—Ä–æ–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            await state.set_state(UserIdState.USER_ID)
            await state.update_data(user_id=int(questionnaires[0]))
            await bot.send_photo(chat_id=message.chat.id, photo=questionnaires[1],
                                 caption=moderator_text(questionnaires),
                                 reply_markup=moderation_keyboard,
                                 )
        else:
            await message.answer("üòé–í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!")
    except TelegramNetworkError as telegram_err:
        logger.exception(telegram_err)


@main_admin_router.message(F.text == 'üíæ–í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                           AdminsFilter(admins_filter()),
                           )
async def get_questionnaires(message: types.Message) -> None:
    await message.answer("–ú–æ–∂–Ω–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ (–Ω–µ –∞–Ω–∫–µ—Ç—ã).\n"
                         "–õ–∏–±–æ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–µ—Ç–µ–ª–µ–π.",
                         reply_markup=download_button)
