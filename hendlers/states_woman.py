"""
–ú–æ–¥—É–ª—å –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""

import logging
import sqlite3

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext

from data.sqlite_men_questionnaire import MensQuestionnaires
from keyboards.replay import replay_keyboard
from utils.states import MenQuestionnaire
woman_questionnaires_router = Router()
db = MensQuestionnaires()


@woman_questionnaires_router.message(F.text == 'üôã‚Äç‚ôÇÔ∏è–ó–∞–ø–æ–ª–Ω–∏—Ç—å –º—É–∂—Å–∫—É—é –∞–Ω–∫–µ—Ç—É')
async def add_photo(message: types.Message, state: FSMContext) -> None:
    await state.set_state(MenQuestionnaire.PHOTO)
    await message.answer(
        f"{message.from_user.first_name}\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!"
    )


@woman_questionnaires_router.message(MenQuestionnaire.PHOTO, F.photo)
async def add_name(message: types.Message, state: FSMContext) -> None:
    await state.update_data(photo=message.photo[-1].file_id)
    await state.set_state(MenQuestionnaire.NAME)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")


@woman_questionnaires_router.message(MenQuestionnaire.PHOTO, ~F.photo)
async def incorrect_photo(message: types.Message, state: FSMContext) -> None:
    await message.answer(
        f"{message.from_user.first_name}\n"
        "–ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!"
    )


@woman_questionnaires_router.message(MenQuestionnaire.NAME)
async def add_age(message: types.Message, state: FSMContext) -> None:
    await state.update_data(name=message.text, sex='–ü–∞—Ä–µ–Ω—å')
    await state.set_state(MenQuestionnaire.AGE)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç: ")


@woman_questionnaires_router.message(MenQuestionnaire.AGE)
async def add_about(message: types.Message, state: FSMContext) -> None:
    if message.text.isdigit() and int(message.text) >= 18:
        await state.update_data(age=int(message.text))
        await state.set_state(MenQuestionnaire.ABOUT_ME)
        await message.answer("–†–∞—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ: ")
    elif message.text.isdigit() and int(message.text) < 18:
        await message.answer("–í–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 18 –ª–µ—Ç!")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º!")


@woman_questionnaires_router.message(MenQuestionnaire.ABOUT_ME)
async def add_find_me(message: types.Message, state: FSMContext) -> None:
    await state.update_data(about_me=message.text)
    await state.set_state(MenQuestionnaire.FIND)
    menu = await replay_keyboard(['–ü–∞—Ä–µ–Ω—å', '–î–µ–≤—É—à–∫–∞'])
    await message.answer("–ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?", reply_markup=menu)


@woman_questionnaires_router.message(MenQuestionnaire.FIND, F.text.casefold().in_(['–ø–∞—Ä–µ–Ω—å', '–¥–µ–≤—É—à–∫–∞']))
async def check_status(message: types.Message, state: FSMContext) -> None:
    await state.update_data(gender=message.text)
    await state.set_state(MenQuestionnaire.STATUS)
    menu = await replay_keyboard(['–•–æ—á—É', '–ù–µ —Ö–æ—á—É'])
    await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?", reply_markup=menu)


@woman_questionnaires_router.message(MenQuestionnaire.STATUS, F.text.casefold().in_(['—Ö–æ—á—É', '–Ω–µ —Ö–æ—á—É']))
async def check_status(message: types.Message, state: FSMContext) -> None:
    await state.update_data(status=message.text)
    data = await state.get_data()
    await state.clear()
    photo = data.get('photo')
    form_msg = []
    [
        form_msg.append(f'{key}: {value}')
        for key, value in data.items()
    ]
    await message.answer_photo(
        photo,
        "\n".join(form_msg[1:]),
    )
    try:
        db.add_profile(
            user_id=message.from_user.id,
            photo=photo,
            user_name=data.get('name'),
            gender=data.get('sex'),
            age=data.get('age'),
            about_me=data.get('about_me'),
            status=data.get('status'),
            finding=data.get('gender')
        )
    except sqlite3.IntegrityError:
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")


@woman_questionnaires_router.message(MenQuestionnaire.FIND)
async def incorrect_gender(message: types.Message, state: FSMContext) -> None:
    menu = await replay_keyboard(['–ü–∞—Ä–µ–Ω—å', '–î–µ–≤—É—à–∫–∞'])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏!", reply_markup=menu)
