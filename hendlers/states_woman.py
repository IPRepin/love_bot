"""
–ú–æ–¥—É–ª—å –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""
import logging
import sqlite3

from aiogram import types, Router, F, Bot
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv

from data.sqlite_woman_questionnaire import WomanQuestionnaires
from filters.admins_filter import get_random_admin
from filters.photo_filter import has_face
from keyboards.inline import moderation_keyboard, send_video
from keyboards.replay import gen_replay_keyboard, edit_profile_markup
from utils.auxiliary_module import administrator_text
from utils.states import StatesWomanQuestionnaire, UserIdState

logger = logging.getLogger(__name__)
woman_questionnaires_router = Router()
db = WomanQuestionnaires()
load_dotenv()


@woman_questionnaires_router.message(F.text == 'üôã‚Äç‚ôÄÔ∏è–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∂–µ–Ω—Å–∫—É—é –∞–Ω–∫–µ—Ç—É')
async def add_photo(message: types.Message, state: FSMContext) -> None:
    logger.info('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–µ–≤—É—à–∫–∞')
    await state.set_state(StatesWomanQuestionnaire.PHOTO)
    await message.answer(
        f"{message.from_user.first_name}\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!"
    )


@woman_questionnaires_router.message(StatesWomanQuestionnaire.PHOTO, F.photo)
async def add_name(message: types.Message, state: FSMContext, bot: Bot) -> None:
    file_id = message.photo[-1].file_id
    download_file = await bot.get_file(file_id)
    file_path = download_file.file_path
    file_bytes = await bot.download_file(file_path)
    if has_face(file_bytes):
        await state.update_data(photo=message.photo[-1].file_id)
        await state.set_state(StatesWomanQuestionnaire.NAME)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    else:
        await message.answer("–ù–µ—Ç –ª–∏—Ü–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!")


@woman_questionnaires_router.message(StatesWomanQuestionnaire.PHOTO, ~F.photo)
async def incorrect_photo(message: types.Message, state: FSMContext) -> None:
    await message.answer(
        f"{message.from_user.first_name}\n"
        "–ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!"
    )


@woman_questionnaires_router.message(StatesWomanQuestionnaire.NAME)
async def add_age(message: types.Message, state: FSMContext) -> None:
    await state.update_data(name=message.text, sex='–ñ–µ–Ω—Å–∫–∏–π')
    await state.set_state(StatesWomanQuestionnaire.AGE)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç: ")


@woman_questionnaires_router.message(StatesWomanQuestionnaire.AGE)
async def add_about(message: types.Message, state: FSMContext) -> None:
    if message.text.isdigit() and int(message.text) >= 18:
        await state.update_data(age=int(message.text), user_url=f"@{message.from_user.username}")
        await state.set_state(StatesWomanQuestionnaire.ABOUT_ME)
        await message.answer("üé®–£–≤–ª–µ—á–µ–Ω–∏—è, —Ö–æ–±–±–∏: ")
    elif message.text.isdigit() and int(message.text) < 18:
        await message.answer("–í–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 18 –ª–µ—Ç!")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!")


@woman_questionnaires_router.message(StatesWomanQuestionnaire.ABOUT_ME)
async def add_find_me(message: types.Message, state: FSMContext) -> None:
    await state.update_data(about_me=message.text)
    await state.set_state(StatesWomanQuestionnaire.FIND)
    menu = await gen_replay_keyboard(['–ü–∞—Ä–µ–Ω—å', '–î–µ–≤—É—à–∫–∞'])
    await message.answer("–ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?", reply_markup=menu)


@woman_questionnaires_router.message(StatesWomanQuestionnaire.FIND,
                                     F.text.casefold().in_(['–ø–∞—Ä–µ–Ω—å', '–¥–µ–≤—É—à–∫–∞']))
async def check_status(message: types.Message, state: FSMContext) -> None:
    await state.update_data(find_gender=message.text)
    await state.set_state(StatesWomanQuestionnaire.STATUS)
    menu = await gen_replay_keyboard(['–¢–æ–ª—å–∫–æ —Ç–µ–ª–µ–≥—Ä–∞–º'])
    await message.answer("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –≤ –ª—é–±–æ–π –∏–∑ —Å–æ—Ü —Å–µ—Ç–µ–π\n"
                         "–ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ–≥—Ä–∞–º.",
                         reply_markup=menu)


@woman_questionnaires_router.message(StatesWomanQuestionnaire.STATUS)
async def final_status(message: types.Message, state: FSMContext, bot: Bot) -> None:
    await state.update_data(social_network=message.text)
    data = await state.get_data()
    await state.clear()
    user_id = message.from_user.id
    photo = data.get('photo')
    text = administrator_text(data)
    try:
        db.add_profile(
            user_id=user_id,
            photo=photo,
            user_name=data.get('name'),
            user_url=data.get('user_url'),
            gender=data.get('sex'),
            age=data.get('age'),
            about_me=data.get('about_me'),
            social_network=data.get('social_network'),
            finding=data.get('find_gender')
        )
        admin_id = get_random_admin()
        await bot.send_photo(chat_id=admin_id,
                             photo=photo,
                             caption="‚ùó‚ùó–ü—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞!‚ùó‚ùó\n"
                                     f"user_id: {message.from_user.id}\n"
                                     f"{text}\n"
                                     f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '‚è©–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–∫–µ—Ç—ã'",
                             # reply_markup=moderation_keyboard
                             )
        await message.answer(text=f"{data.get('name')}\n"
                                  f"‚úÖ–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n"
                                  f"–î–û–ö–ê–ñ–ò–¢–ï, –ß–¢–û –í–´ –ù–ï –§–ï–ô–ö\n"
                                  f'–û–¢–ü–†–ê–í–¨–¢–ï –í–ò–î–ï–û–°–û–û–ë–©–ï–ù–ò–ï –° –§–†–ê–ó–û–ô "–î–õ–Ø –ö–ê–ù–ê–õ–ê –ó–ù–ê–ö–û–ú–°–¢–í"\n'
                                  f"–ù–ê–ñ–ê–í –ù–ê –ö–ù–û–ü–ö–£ 'üìΩ–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ'\n"
                                  f"–ú—ã —Å–æ–æ–±—â–∏–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
                             reply_markup=send_video,
                             disable_web_page_preview=True, )
        await message.answer("–ú–µ–Ω—é‚¨áÔ∏è", reply_markup=edit_profile_markup)
        logger.info("Added profile woman")
    except sqlite3.IntegrityError as error:
        logger.error(error)
        logger.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        await message.answer(f"{data.get('name')}\n"
                             f"–í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –∞–Ω–∫–µ—Ç—É.",
                             reply_markup=edit_profile_markup)


@woman_questionnaires_router.message(StatesWomanQuestionnaire.FIND)
async def incorrect_gender(message: types.Message, state: FSMContext) -> None:
    menu = await gen_replay_keyboard(['–ü–∞—Ä–µ–Ω—å', '–î–µ–≤—É—à–∫–∞'])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏!", reply_markup=menu)
